* 실습 파일 순서 *
Student	-> StudentMain 
Car	-> CarMain
Car2	-> Car2Main
Korean	-> KoreanMain
Car3	-> Car3Main


* 객체 지향 프로그래밍 *
	- 현실 : 부품을 먼저 만들고 부품을 조립해서 완성품을 만든다.
	- 개발 : 객체 하나하나 만들고 조립해서 완성된 프로그램을 만든다.

		
* 객체 (Object)
	- 물리적으로 존재하거나 개념적인것 중에서 식별이 가능한것을 말한다.
		: 자동차, 자전거, 책... / 학과, 강의, 주문....
	- 속성과 동작으로 구성된다 
	-> 속성: 데이터 / 동작 : 메서드 -> 자바: 변수 / 메서드
		예) 사람 : 이름, 나이 / 웃다, 먹다  
		  자동차 : 모델, 색상 / 달린다, 멈춘다
		

* 객체의 상호작용
	- 사람 <- 기능 사용 / 결과 리턴 -> 계산기
	-		메서드 호출 / 결과 리턴(돌려준다) : 결과를 얻기위해 메서드 호출(사용)하는 것.
	-		데이터를 주고 기능을 사용하려는 것 : 매개값
	-					         : 결과는 변수를 만들어서 변수를 통해 받음



* 객체 지향 프로그래밍 특징 *
	1. 캡슐화 
		- 데이터(변수), 동작(메서드)를 하나로 묶고 외부에서 감추는 역할.
		- 노출된 변수와 메서드만 사용 가능.
		- 외부의 잘못된 사용으로 객체가 인해 손상되지 않도록 하기 위함.
		- 노출시킬것인지, 숨길것인지 '접근제어자'를 사용
		
	2. 상속
		- 현실		: 재산 물려받음
		- 프로그래밍	: 변수와 메서드 물려받음.
		- 설계, 유지/보수 시간 최소화

	3. 다형성
		- 사용방법은 같지만 실행결과 다양하게 나옴.
			: 자동차 타이어 -> 성능이 다양하게 나옴.
		- 자동 타입 변환 / 재정의(오버라이딩) 필요하다.


* 클래스
	- 객체 지향 프로그래밍에서 객체를 만들기 위한 설계도
		: 인스턴스화 : 설계도를 가지고 객체를 만드는 것.
		: 인스턴스 : 객체
	- 선언
		: 객체 생성을 위해 설계도를 작성하는 작업.
	- 이름
		: 첫글자 대문자.
		: 문자의 결합은 첫글자 대문자로 사용.
		: 숫자는 첫글자로 올 수 없다.
		: 특수문자는 _ , $만 사용 가능.
	- 객체를 어떻게 생성할것인지 정의하는 클래스 라서 main없음 -> 설계도!
		: 소스파일(.java)설계도 안에 클래스 여러개 선언 가능! -> 컴파일하면 class파일 여러개 나옴!
			: 여러 클래스 중 하나의 클래스만 public 사용 가능 -> 편리성 위해서임. 공개클래스에서 사용할 목적으로 만드는 것. 
			: 실제 프로젝트에서는 여러클래스 한곳에 사용하지 않음.
		: 소스파일(.java)은 클래스 파일이 아니다


* 클래스의 두가지 용도 
	- 라이브러리 클래스	: 실행할 수 없고, 다른 클래스에서 이용하는 클래스
	- 실행 클래스		: main()메서드를 가지고 있는 실행 가능한 클래스	


* 메모리 영역
	힙	- 객체
	스택	- 변수, 객체의 주소
	메서드
		

* 객체 생성/객체 변수
클래스 변수 = new 클래스();
	: 객체는 힙 영역에 주소는 스택영역에! -> 참조타입!
	: new 클래스(); 객체를 생성하고 주소를 클래스 변수에 리턴하겠다.
		
* 변수의 선언과 사용 
	- 변수의 선언 방법과 동일


* 클래스변수와 멤버변수의 차이점
	클래스변수	- 클래스{} 내에서 선언		, 객체 내부에 존재				, 객체 내/외부 어디서든 사용 가능
	멤버변수		- 생성자/메서드{} 내에서 선언	, 생성자/메서드 호출 시에만 존재		, 생성자/메서드{} 내에서만 사용 가능

		
* 변수에 초기값 주지않고 선언만 했을때 
	- 객체 생성 시 자동으로 기본값으로 초기화 됨.
		기본 타입 - 정수타입 : 0 / 실수타입 : 0.0 / 논리타입 : false
		참조 타입 - 배열 : null / 인터페이스 : null / 클래스(String포함) : null


* 클래스의 구성 요소 
	- 변수
		: 객체의 데이터가 저장되는 곳.
		: class안에서 선언된 변수(외부에서 사용 가능) 
				<-> 지역변수 : main{블럭}안에서 선언된 변수(외부에서 사용 불가)
	- 생성자
		: 설계도를 가지고 객체를 만든다.
		: 객체 생성 시 초기화 역할 담당.
		- new 클래스이름();
		- 필드에 값을 처음 대입하려는 용도
		- 값을 바꿔주는 역할
		클래스 없이 동작하는 기능은 함수! 그러나 자바는 클래스 단위이기 때문에 함수 없음.
		형태 :	클래스이름(){ }
			클래스이름(매개변수,....){ }
				  매개변수 = 파라미터
	- 메서드
		: 객체의 동작으로 호출 시 실행하는 블록
		형태 :	리턴타입 메서드이름 ([매개변수 이름]){
				실행할 코드
				return      ;		-> 리턴타입 :int, boolean, String <-> 없을 경우 : void
			} (결과로 돌아오는 값의 타입) 
				
			리턴타입 없을 경우 : void
			void 메서드이름 (){
				return;		// 생략 가능.
			}


* 생성자 
	- new 클래스();  ->  생성자 호출 : 생성자의 블럭{}을 실행 한다는 의미.
	- 객체마다 다른 값 가지게 하려면 생성자 사용해야함.
	- 설계도를 계속 만들면 귀찮음 간결하게 생성자로 간편하게 객체 생성 가능.


* 명시적 선언 
	클래스(매개변수, ...){
		// 객체의 초기화 코드
	}
	
	
* 생성자 사용 안할때	
	생성자 사용하지 않고 필드에 바로 값 대입하는 이유?
	모든 객체에 동일한 값이 들어갈때 초기화를 필드 선언과 동시에 해준다.




